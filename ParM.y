-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParM where
import AbsM
import LexM
import ErrM

}

%name pProg Prog
%name pBlock Block
%name pListDecl ListDecl
%name pDecl Decl
%name pVar_decl Var_decl
%name pType Type
%name pArray_dims Array_dims
%name pFun_decl Fun_decl
%name pFun_block Fun_block
%name pParam_list Param_list
%name pListParam ListParam
%name pParam Param
%name pBasic_decl Basic_decl
%name pBasic_array_dims Basic_array_dims
%name pProg_body Prog_body
%name pListStmt ListStmt
%name pFun_body Fun_body
%name pStmt Stmt
%name pIdentifier Identifier
%name pExpr Expr
%name pBint_term Bint_term
%name pBint_factor Bint_factor
%name pCompare_op Compare_op
%name pInt_expr Int_expr
%name pAdd_op Add_op
%name pInt_term Int_term
%name pMul_op Mul_op
%name pInt_factor Int_factor
%name pMod_list Mod_list
%name pListArg ListArg
%name pArg Arg
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '&&' { PT _ (TS _ 1) }
  '(' { PT _ (TS _ 2) }
  ')' { PT _ (TS _ 3) }
  '*' { PT _ (TS _ 4) }
  '+' { PT _ (TS _ 5) }
  ',' { PT _ (TS _ 6) }
  '-' { PT _ (TS _ 7) }
  '/' { PT _ (TS _ 8) }
  ':' { PT _ (TS _ 9) }
  ':=' { PT _ (TS _ 10) }
  ';' { PT _ (TS _ 11) }
  '<' { PT _ (TS _ 12) }
  '=' { PT _ (TS _ 13) }
  '=<' { PT _ (TS _ 14) }
  '>' { PT _ (TS _ 15) }
  '>=' { PT _ (TS _ 16) }
  '[' { PT _ (TS _ 17) }
  ']' { PT _ (TS _ 18) }
  'begin' { PT _ (TS _ 19) }
  'bool' { PT _ (TS _ 20) }
  'ceil' { PT _ (TS _ 21) }
  'do' { PT _ (TS _ 22) }
  'else' { PT _ (TS _ 23) }
  'end' { PT _ (TS _ 24) }
  'false' { PT _ (TS _ 25) }
  'float' { PT _ (TS _ 26) }
  'floor' { PT _ (TS _ 27) }
  'fun' { PT _ (TS _ 28) }
  'if' { PT _ (TS _ 29) }
  'int' { PT _ (TS _ 30) }
  'not' { PT _ (TS _ 31) }
  'print' { PT _ (TS _ 32) }
  'read' { PT _ (TS _ 33) }
  'real' { PT _ (TS _ 34) }
  'return' { PT _ (TS _ 35) }
  'size' { PT _ (TS _ 36) }
  'then' { PT _ (TS _ 37) }
  'true' { PT _ (TS _ 38) }
  'var' { PT _ (TS _ 39) }
  'while' { PT _ (TS _ 40) }
  '{' { PT _ (TS _ 41) }
  '||' { PT _ (TS _ 42) }
  '}' { PT _ (TS _ 43) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }

Prog :: { Prog }
Prog : Block { AbsM.Prog1 $1 }
Block :: { Block }
Block : ListDecl Prog_body { AbsM.Block1 $1 $2 }
ListDecl :: { [Decl] }
ListDecl : {- empty -} { [] }
         | Decl { (:[]) $1 }
         | Decl ';' ListDecl { (:) $1 $3 }
         | {- empty -} { [] }
         | Decl ';' ListDecl { (:) $1 $3 }
         | {- empty -} { [] }
         | Decl { (:[]) $1 }
         | Decl ';' ListDecl { (:) $1 $3 }
Decl :: { Decl }
Decl : Var_decl { AbsM.Decl1 $1 } | Fun_decl { AbsM.Decl2 $1 }
Var_decl :: { Var_decl }
Var_decl : 'var' Ident Array_dims ':' Type { AbsM.Var_decl1 $2 $3 $5 }
Type :: { Type }
Type : 'int' { AbsM.Type1 }
     | 'real' { AbsM.Type2 }
     | 'bool' { AbsM.Type3 }
Array_dims :: { Array_dims }
Array_dims : '[' Expr ']' Array_dims { AbsM.Array_dims1 $2 $4 }
           | {- empty -} { AbsM.Array_dims2 }
Fun_decl :: { Fun_decl }
Fun_decl : 'fun' Ident Param_list ':' Type '{' Fun_block '}' { AbsM.Fun_decl1 $2 $3 $5 $7 }
Fun_block :: { Fun_block }
Fun_block : ListDecl Fun_body { AbsM.Fun_block1 $1 $2 }
Param_list :: { Param_list }
Param_list : '(' ListParam ')' { AbsM.Param_list1 $2 }
ListParam :: { [Param] }
ListParam : {- empty -} { [] }
          | Param { (:[]) $1 }
          | Param ',' ListParam { (:) $1 $3 }
Param :: { Param }
Param : Basic_decl { AbsM.Param1 $1 }
Basic_decl :: { Basic_decl }
Basic_decl : Ident Basic_array_dims ':' Type { AbsM.Basic_decl1 $1 $2 $4 }
Basic_array_dims :: { Basic_array_dims }
Basic_array_dims : '[' ']' Basic_array_dims { AbsM.Basic_array_dims1 $3 }
                 | {- empty -} { AbsM.Basic_array_dims2 }
Prog_body :: { Prog_body }
Prog_body : 'begin' ListStmt 'end' { AbsM.Prog_body1 $2 }
ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] }
         | Stmt { (:[]) $1 }
         | Stmt ';' ListStmt { (:) $1 $3 }
         | {- empty -} { [] }
         | Stmt ';' ListStmt { (:) $1 $3 }
         | {- empty -} { [] }
         | Stmt { (:[]) $1 }
         | Stmt ';' ListStmt { (:) $1 $3 }
         | {- empty -} { [] }
         | Stmt ';' ListStmt { (:) $1 $3 }
Fun_body :: { Fun_body }
Fun_body : 'begin' ListStmt 'return' Expr ';' 'end' { AbsM.Fun_body1 $2 $4 }
Stmt :: { Stmt }
Stmt : 'if' Expr 'then' Stmt 'else' Stmt { AbsM.Stmt1 $2 $4 $6 }
     | 'while' Expr 'do' Stmt { AbsM.Stmt2 $2 $4 }
     | 'read' Identifier { AbsM.Stmt3 $2 }
     | Identifier ':=' Expr { AbsM.Stmt4 $1 $3 }
     | 'print' Expr { AbsM.Stmt5 $2 }
     | '{' Block '}' { AbsM.Stmt6 $2 }
Identifier :: { Identifier }
Identifier : Ident Array_dims { AbsM.Identifier1 $1 $2 }
Expr :: { Expr }
Expr : Expr '||' Bint_term { AbsM.Expr1 $1 $3 }
     | Bint_term { AbsM.Expr2 $1 }
Bint_term :: { Bint_term }
Bint_term : Bint_term '&&' Bint_factor { AbsM.Bint_term1 $1 $3 }
          | Bint_factor { AbsM.Bint_term2 $1 }
Bint_factor :: { Bint_factor }
Bint_factor : 'not' Bint_factor { AbsM.Bint_factor1 $2 }
            | Int_expr Compare_op Int_expr { AbsM.Bint_factor2 $1 $2 $3 }
            | Int_expr { AbsM.Bint_factor3 $1 }
Compare_op :: { Compare_op }
Compare_op : '<' { AbsM.Compare_op1 }
           | '>' { AbsM.Compare_op2 }
           | '=<' { AbsM.Compare_op3 }
           | '>=' { AbsM.Compare_op4 }
           | '=' { AbsM.Compare_op5 }
Int_expr :: { Int_expr }
Int_expr : Int_expr Add_op Int_term { AbsM.Int_expr1 $1 $2 $3 }
         | Int_term { AbsM.Int_expr2 $1 }
Add_op :: { Add_op }
Add_op : '+' { AbsM.Add_op1 } | '-' { AbsM.Add_op2 }
Int_term :: { Int_term }
Int_term : Int_term Mul_op Int_factor { AbsM.Int_term1 $1 $2 $3 }
         | Int_factor { AbsM.Int_term2 $1 }
Mul_op :: { Mul_op }
Mul_op : '*' { AbsM.Mul_op1 } | '/' { AbsM.Mul_op2 }
Int_factor :: { Int_factor }
Int_factor : '(' Expr ')' { AbsM.Int_factor1 $2 }
           | 'size' '(' Ident Basic_array_dims ')' { AbsM.Int_factor2 $3 $4 }
           | 'float' '(' Expr ')' { AbsM.Int_factor3 $3 }
           | 'floor' '(' Expr ')' { AbsM.Int_factor4 $3 }
           | 'ceil' '(' Expr ')' { AbsM.Int_factor5 $3 }
           | Ident Mod_list { AbsM.Int_factor6 $1 $2 }
           | Integer { AbsM.Int_factor7 $1 }
           | Double { AbsM.Int_factor8 $1 }
           | 'true' { AbsM.Int_factor9 }
           | 'false' { AbsM.Int_factor10 }
           | '-' Int_factor { AbsM.Int_factor11 $2 }
Mod_list :: { Mod_list }
Mod_list : '(' ListArg ')' { AbsM.Mod_list1 $2 }
         | Array_dims { AbsM.Mod_list2 $1 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Arg :: { Arg }
Arg : Expr { AbsM.Arg1 $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

